{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sam Chan\\\\Desktop\\\\Local Private\\\\Learn\\\\Projects\\\\calculator\\\\src\\\\components\\\\Panel\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Panel() {\n  _s();\n\n  // State 1: Array to store operands, need 2 to start calculation, need only 1 if clear/del\n  const [operandsArr, setOperand] = useState([]); // State 2: Operator to store what operation to do\n  // +: add || -: minus || x: mul || รท: div\n\n  const [operator, setOperator] = useState(\"\"); // State 3: show current number (result/operand)\n\n  let [display, setDisplay] = useState(\"\"); // State 4: Flags for presence of operands [1st operand, 2nd operand ...]\n\n  let [flags, setFlags] = useState([0, 0]);\n  /* ------------------------------------------------------------------------- */\n  //  callback for operands number input, store operands\n\n  const handleNumClick = () => e => {\n    const text = e.target.innerText;\n    const value = text * 1; // Condition 1: No operands\n\n    if (operandsArr.length === 0) {\n      // Condition 1.1: no operator ABSENT\n      if (!operator) {\n        setDisplay(value.toString());\n        setOperand([value]);\n        setFlags([1, 0]);\n      } // Condition 1.2:  operator PRESENT\n      else {\n        setDisplay(value.toString());\n        setOperand([0, value]);\n        setFlags([1, 1]);\n      }\n    } // Condition 2: One operand\n\n\n    if (operandsArr.length === 1) {\n      // Condition 2.1: no operator\n      if (!operator) {\n        let newText = operandsArr[0] + text;\n        let newValue = newText * 1;\n        setDisplay(newValue.toString());\n        setOperand([newValue]);\n      } // Condition 2.2: has operator\n      else {\n        // Condition 2.2.1: number > operator > number --> accept 2nd number\n        if (flags[0]) {\n          setDisplay(value.toString());\n          setOperand([operandsArr[0], value]);\n          setFlags([1, 1]);\n        } // Condition 2.2.1:   operator > number > number --> update 1st number\n        else {\n          let newText = operandsArr[0] + text; // for 1 exception: 0 start, display will be 01213, convert to number to avoid\n\n          let newValue = newText * 1;\n          setDisplay(newValue.toString());\n          setOperand([newValue]);\n        }\n      }\n    } // Condition 3: Two operands (must have operator)\n\n\n    if (operandsArr.length === 2) {\n      // Condition 3.1: flags[1] = false (only autofill second when operator present)\n      if (!flags[1]) {\n        setDisplay(text);\n        setOperand([operandsArr[0], value]);\n        setFlags([1, 1]);\n      } // Condition 3.2: flags[1] = true (user input second operand)\n      else {\n        let newText = operandsArr[1] + text;\n        let newValue = newText * 1; // for 1 exception: 0 start, display will be 01213, convert to number to avoid\n\n        setDisplay(newValue.toString());\n        setOperand([operandsArr[0], newValue]);\n        setFlags([1, 1]);\n      }\n    }\n  }; // callback for operator click\n\n\n  function handleOpClick(type) {\n    // // Conditino 0: when no operand\n    // if (operandsArr.length === 0) setOperator(type);\n    // // Condition 1: when 1 operand, default 2nd = 1st operand\n    // if (operandsArr.length === 1) {\n    // \t// Condition 1.1: if operator present, execute with 0 then update operator\n    // \tif (operator) {\n    // \t\tsetOperand([0, operandsArr[0]]);\n    // \t\thandleEqClick();\n    // \t\tsetOperator(type);\n    // \t}\n    // \t// Condition 1.2: if  operator absent\n    // \telse {\n    // \t\tsetOperator(type);\n    // \t\tsetOperand([operandsArr[0], operandsArr[0]]);\n    // \t\tsetFlags([1, 0]);\n    // \t}\n    // }\n    // // Condition 2: when 2 operands (imply operator PRESENT), calculate then update operator\n    // if (operandsArr.length === 2) {\n    // \thandleEqClick();\n    // \tsetOperator(type);\n    // }\n    if (!flags[0]) setOperator(type);\n\n    if (flags[0] && !flags[1]) {\n      setOperator(type);\n      setOperand([operandsArr[0], operandsArr[0]]);\n    } // case 1: operator > num > operator\n    // case 2: num > operator > num > operator\n\n\n    if (flags[0] && flags[1]) {\n      if (operator) {\n        // First calculate\n        handleEqClick(); // Then update operator\n\n        setOperator(type);\n      }\n    }\n  } //  callback for \"=\", calculation\n\n\n  function handleEqClick() {\n    // When NO operands / Infinity\n    if (!operandsArr.length || operandsArr.includes(\"Infinity\")) return;\n    const map = {\n      add: () => {\n        var _operandsArr$;\n\n        return operandsArr[0] + ((_operandsArr$ = operandsArr[1]) !== null && _operandsArr$ !== void 0 ? _operandsArr$ : operandsArr[0]);\n      },\n      minus: () => {\n        var _operandsArr$2;\n\n        return operandsArr[0] - ((_operandsArr$2 = operandsArr[1]) !== null && _operandsArr$2 !== void 0 ? _operandsArr$2 : operandsArr[0]);\n      },\n      mul: () => {\n        var _operandsArr$3;\n\n        return operandsArr[0] * ((_operandsArr$3 = operandsArr[1]) !== null && _operandsArr$3 !== void 0 ? _operandsArr$3 : operandsArr[0]);\n      },\n      div: () => {\n        var _operandsArr$4;\n\n        return operandsArr[0] / ((_operandsArr$4 = operandsArr[1]) !== null && _operandsArr$4 !== void 0 ? _operandsArr$4 : operandsArr[0]);\n      }\n    };\n    const operation = map[operator];\n\n    if (operation) {\n      let result = operation();\n      setDisplay(result.toString());\n      setOperand([result, operandsArr[1]]); // setOperator(\"\");\n\n      setFlags([1, 0]);\n    }\n  } //  callback for \"AC\", clear all state\n\n\n  function clearAll() {\n    return () => {\n      setOperand([]);\n      setDisplay(\"\");\n      setOperator(\"\");\n      setFlags([0, 0]);\n    };\n  } // callback for \"del\", backspace display and current operand\n\n\n  function handleDelClick() {\n    return () => {\n      // when no display, just EXIT for performance efficiency\n      if (!display || display === \"Infinity\") return;\n      let updateText = display.slice(0, -1);\n      setDisplay(updateText); // when 1 operands\n\n      if (!flags[1]) {\n        setOperator(\"\"); // (\"\" * 1) => 0 ; parseInt(\"\")=> NaN\n\n        if (updateText) {\n          setOperand([updateText * 1]);\n        } else {\n          setOperand([]);\n          setFlags([0, 0]);\n        }\n      } // when 2 operands\n      else if (updateText) {\n        setOperand([operandsArr[0], updateText * 1]);\n      } else {\n        setOperand([operandsArr[0], operandsArr[0]]);\n        setFlags([1, 0]);\n      }\n    };\n  } // callback for \".\", handle decimal value\n\n\n  function handleDecClick() {\n    return () => {\n      let newText = display + \".\";\n      setDisplay(newText);\n      setOperand(newText * 1);\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: display ? display : \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item ac\",\n      onClick: clearAll(),\n      children: \"AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleDelClick(),\n      children: \"DEL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: () => handleOpClick(\"div\"),\n      children: \"\\xF7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: () => handleOpClick(\"mul\"),\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: () => handleOpClick(\"add\"),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: () => handleOpClick(\"minus\"),\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleDecClick(),\n      children: \".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item \",\n      onClick: handleNumClick(),\n      children: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"panel-item equal\",\n      onClick: () => handleEqClick(),\n      children: \"=\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Panel, \"L9+hwMd+o0pEFr5dTdAXLu+BbbU=\");\n\n_c = Panel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Panel\");","map":{"version":3,"names":["React","useState","Panel","operandsArr","setOperand","operator","setOperator","display","setDisplay","flags","setFlags","handleNumClick","e","text","target","innerText","value","length","toString","newText","newValue","handleOpClick","type","handleEqClick","includes","map","add","minus","mul","div","operation","result","clearAll","handleDelClick","updateText","slice","handleDecClick"],"sources":["C:/Users/Sam Chan/Desktop/Local Private/Learn/Projects/calculator/src/components/Panel/index.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./index.css\";\r\n\r\nexport default function Panel() {\r\n\t// State 1: Array to store operands, need 2 to start calculation, need only 1 if clear/del\r\n\tconst [operandsArr, setOperand] = useState([]);\r\n\r\n\t// State 2: Operator to store what operation to do\r\n\t// +: add || -: minus || x: mul || รท: div\r\n\tconst [operator, setOperator] = useState(\"\");\r\n\r\n\t// State 3: show current number (result/operand)\r\n\tlet [display, setDisplay] = useState(\"\");\r\n\r\n\t// State 4: Flags for presence of operands [1st operand, 2nd operand ...]\r\n\tlet [flags, setFlags] = useState([0, 0]);\r\n\t/* ------------------------------------------------------------------------- */\r\n\t//  callback for operands number input, store operands\r\n\tconst handleNumClick = () => (e) => {\r\n\t\tconst text = e.target.innerText;\r\n\t\tconst value = text * 1;\r\n\t\t// Condition 1: No operands\r\n\t\tif (operandsArr.length === 0) {\r\n\t\t\t// Condition 1.1: no operator ABSENT\r\n\t\t\tif (!operator) {\r\n\t\t\t\tsetDisplay(value.toString());\r\n\t\t\t\tsetOperand([value]);\r\n\t\t\t\tsetFlags([1, 0]);\r\n\t\t\t}\r\n\t\t\t// Condition 1.2:  operator PRESENT\r\n\t\t\telse {\r\n\t\t\t\tsetDisplay(value.toString());\r\n\t\t\t\tsetOperand([0, value]);\r\n\t\t\t\tsetFlags([1, 1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Condition 2: One operand\r\n\t\tif (operandsArr.length === 1) {\r\n\t\t\t// Condition 2.1: no operator\r\n\t\t\tif (!operator) {\r\n\t\t\t\tlet newText = operandsArr[0] + text;\r\n\t\t\t\tlet newValue = newText * 1;\r\n\t\t\t\tsetDisplay(newValue.toString());\r\n\t\t\t\tsetOperand([newValue]);\r\n\t\t\t}\r\n\t\t\t// Condition 2.2: has operator\r\n\t\t\telse {\r\n\t\t\t\t// Condition 2.2.1: number > operator > number --> accept 2nd number\r\n\t\t\t\tif (flags[0]) {\r\n\t\t\t\t\tsetDisplay(value.toString());\r\n\t\t\t\t\tsetOperand([operandsArr[0], value]);\r\n\t\t\t\t\tsetFlags([1, 1]);\r\n\t\t\t\t}\r\n\t\t\t\t// Condition 2.2.1:   operator > number > number --> update 1st number\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet newText = operandsArr[0] + text;\r\n\t\t\t\t\t// for 1 exception: 0 start, display will be 01213, convert to number to avoid\r\n\t\t\t\t\tlet newValue = newText * 1;\r\n\t\t\t\t\tsetDisplay(newValue.toString());\r\n\t\t\t\t\tsetOperand([newValue]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Condition 3: Two operands (must have operator)\r\n\t\tif (operandsArr.length === 2) {\r\n\t\t\t// Condition 3.1: flags[1] = false (only autofill second when operator present)\r\n\t\t\tif (!flags[1]) {\r\n\t\t\t\tsetDisplay(text);\r\n\t\t\t\tsetOperand([operandsArr[0], value]);\r\n\t\t\t\tsetFlags([1, 1]);\r\n\t\t\t}\r\n\t\t\t// Condition 3.2: flags[1] = true (user input second operand)\r\n\t\t\telse {\r\n\t\t\t\tlet newText = operandsArr[1] + text;\r\n\t\t\t\tlet newValue = newText * 1;\r\n\t\t\t\t// for 1 exception: 0 start, display will be 01213, convert to number to avoid\r\n\t\t\t\tsetDisplay(newValue.toString());\r\n\t\t\t\tsetOperand([operandsArr[0], newValue]);\r\n\t\t\t\tsetFlags([1, 1]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// callback for operator click\r\n\tfunction handleOpClick(type) {\r\n\t\t// // Conditino 0: when no operand\r\n\t\t// if (operandsArr.length === 0) setOperator(type);\r\n\t\t// // Condition 1: when 1 operand, default 2nd = 1st operand\r\n\t\t// if (operandsArr.length === 1) {\r\n\t\t// \t// Condition 1.1: if operator present, execute with 0 then update operator\r\n\t\t// \tif (operator) {\r\n\t\t// \t\tsetOperand([0, operandsArr[0]]);\r\n\t\t// \t\thandleEqClick();\r\n\t\t// \t\tsetOperator(type);\r\n\t\t// \t}\r\n\t\t// \t// Condition 1.2: if  operator absent\r\n\t\t// \telse {\r\n\t\t// \t\tsetOperator(type);\r\n\t\t// \t\tsetOperand([operandsArr[0], operandsArr[0]]);\r\n\t\t// \t\tsetFlags([1, 0]);\r\n\t\t// \t}\r\n\t\t// }\r\n\t\t// // Condition 2: when 2 operands (imply operator PRESENT), calculate then update operator\r\n\t\t// if (operandsArr.length === 2) {\r\n\t\t// \thandleEqClick();\r\n\t\t// \tsetOperator(type);\r\n\t\t// }\r\n\r\n\t\tif (!flags[0]) setOperator(type);\r\n\t\tif (flags[0] && !flags[1]) {\r\n\t\t\tsetOperator(type);\r\n\t\t\tsetOperand([operandsArr[0], operandsArr[0]]);\r\n\t\t}\r\n\t\t// case 1: operator > num > operator\r\n\t\t// case 2: num > operator > num > operator\r\n\t\tif (flags[0] && flags[1]) {\r\n\t\t\tif (operator) {\r\n\t\t\t\t// First calculate\r\n\t\t\t\thandleEqClick();\r\n\t\t\t\t// Then update operator\r\n\t\t\t\tsetOperator(type);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//  callback for \"=\", calculation\r\n\tfunction handleEqClick() {\r\n\t\t// When NO operands / Infinity\r\n\t\tif (!operandsArr.length || operandsArr.includes(\"Infinity\")) return;\r\n\t\tconst map = {\r\n\t\t\tadd: () => operandsArr[0] + (operandsArr[1] ?? operandsArr[0]),\r\n\t\t\tminus: () => operandsArr[0] - (operandsArr[1] ?? operandsArr[0]),\r\n\t\t\tmul: () => operandsArr[0] * (operandsArr[1] ?? operandsArr[0]),\r\n\t\t\tdiv: () => operandsArr[0] / (operandsArr[1] ?? operandsArr[0]),\r\n\t\t};\r\n\t\tconst operation = map[operator];\r\n\t\tif (operation) {\r\n\t\t\tlet result = operation();\r\n\t\t\tsetDisplay(result.toString());\r\n\t\t\tsetOperand([result, operandsArr[1]]);\r\n\t\t\t// setOperator(\"\");\r\n\t\t\tsetFlags([1, 0]);\r\n\t\t}\r\n\t}\r\n\r\n\t//  callback for \"AC\", clear all state\r\n\tfunction clearAll() {\r\n\t\treturn () => {\r\n\t\t\tsetOperand([]);\r\n\t\t\tsetDisplay(\"\");\r\n\t\t\tsetOperator(\"\");\r\n\t\t\tsetFlags([0, 0]);\r\n\t\t};\r\n\t}\r\n\r\n\t// callback for \"del\", backspace display and current operand\r\n\tfunction handleDelClick() {\r\n\t\treturn () => {\r\n\t\t\t// when no display, just EXIT for performance efficiency\r\n\t\t\tif (!display || display === \"Infinity\") return;\r\n\t\t\tlet updateText = display.slice(0, -1);\r\n\t\t\tsetDisplay(updateText);\r\n\t\t\t// when 1 operands\r\n\t\t\tif (!flags[1]) {\r\n\t\t\t\tsetOperator(\"\");\r\n\t\t\t\t// (\"\" * 1) => 0 ; parseInt(\"\")=> NaN\r\n\t\t\t\tif (updateText) {\r\n\t\t\t\t\tsetOperand([updateText * 1]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetOperand([]);\r\n\t\t\t\t\tsetFlags([0, 0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// when 2 operands\r\n\t\t\telse if (updateText) {\r\n\t\t\t\tsetOperand([operandsArr[0], updateText * 1]);\r\n\t\t\t} else {\r\n\t\t\t\tsetOperand([operandsArr[0], operandsArr[0]]);\r\n\t\t\t\tsetFlags([1, 0]);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t// callback for \".\", handle decimal value\r\n\tfunction handleDecClick() {\r\n\t\treturn () => {\r\n\t\t\tlet newText = display + \".\";\r\n\t\t\tsetDisplay(newText);\r\n\t\t\tsetOperand(newText * 1);\r\n\t\t};\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"panel-container\">\r\n\t\t\t<div className=\"result\">{display ? display : \"0\"}</div>\r\n\t\t\t<button className=\"panel-item ac\" onClick={clearAll()}>\r\n\t\t\t\tAC\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={handleDelClick()}>\r\n\t\t\t\tDEL\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={() => handleOpClick(\"div\")}>\r\n\t\t\t\tรท\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t1\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t2\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t3\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={() => handleOpClick(\"mul\")}>\r\n\t\t\t\tx\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t4\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t5\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t6\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={() => handleOpClick(\"add\")}>\r\n\t\t\t\t+\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t7\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t8\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t9\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={() => handleOpClick(\"minus\")}>\r\n\t\t\t\t-\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className=\"panel-item \" onClick={handleDecClick()}>\r\n\t\t\t\t.\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item \" onClick={handleNumClick()}>\r\n\t\t\t\t0\r\n\t\t\t</button>\r\n\t\t\t<button className=\"panel-item equal\" onClick={() => handleEqClick()}>\r\n\t\t\t\t=\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}